{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Topic 1: Working with Strings\n",
    "# Exercises\n",
    "1. Write a program that takes a string input from the user and prints the length of the string.\n",
    "2. Create a program that converts a given string to uppercase.\n",
    "3. Write a function that checks if a string contains only alphabets.\n",
    "4. Reverse a string without using slicing (e.g., string[::-1]).\n",
    "5. Count how many times a specific character appears in a string.\n",
    "6. Write a function that takes two strings and checks if they are anagrams.\n",
    "7. Implement a function that removes all vowels from a given string.\n",
    "8. Write a function that checks if a string is a palindrome (case-insensitive).\n",
    "9. Given a string, return the first non-repeating character.\n",
    "10. Create a function that capitalizes the first letter of each word in a string.\n",
    "11. Write a program to compress a string (e.g., \"aaabb\" -> \"a3b2\").\n",
    "12. Implement a function to find the longest substring without repeating characters.\n",
    "13. Write a program to check if a string can be rearranged into a palindrome.\n",
    "14. Implement a function that removes all duplicates from a string while preserving the order of characters.\n",
    "15. Write a function to find the longest common prefix among a list of strings.\n",
    "16. Implement a custom `split` function without using Python's built-in methods.\n",
    "17. Write a function to decode a given run-length encoded string (e.g., \"a3b2\" -> \"aaabb\").\n",
    "18. Implement a function to check if one string is a rotation of another.\n",
    "19. Create a function to find all permutations of a given string.\n",
    "20. Write a function to implement a basic version of the `str.index` method.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# Solutions\n",
    "# 1. Write a program that takes a string input from the user and prints the length of the string.\n",
    "def string_length():\n",
    "    user_input = input(\"Enter a string: \")\n",
    "    print(f\"The length of the string is: {len(user_input)}\")\n",
    "# Explanation: The len() function calculates the number of characters in the input string.\n",
    "\n",
    "# 2. Create a program that converts a given string to uppercase.\n",
    "def to_uppercase():\n",
    "    user_input = input(\"Enter a string: \")\n",
    "    print(f\"Uppercase string: {user_input.upper()}\")\n",
    "# Explanation: The upper() method converts all characters in the string to uppercase.\n",
    "\n",
    "# 3. Write a function that checks if a string contains only alphabets.\n",
    "def is_alpha():\n",
    "    user_input = input(\"Enter a string: \")\n",
    "    print(f\"The string contains only alphabets: {user_input.isalpha()}\")\n",
    "# Explanation: The isalpha() method checks if all characters in the string are alphabetic.\n",
    "\n",
    "# 4. Reverse a string without using slicing (e.g., string[::-1]).\n",
    "def reverse_string():\n",
    "    user_input = input(\"Enter a string: \")\n",
    "    reversed_str = ''.join(reversed(user_input))\n",
    "    print(f\"Reversed string: {reversed_str}\")\n",
    "# Explanation: The reversed() function returns an iterator that can be joined to form the reversed string.\n",
    "\n",
    "# 5. Count how many times a specific character appears in a string.\n",
    "def count_char():\n",
    "    user_input = input(\"Enter a string: \")\n",
    "    char = input(\"Enter the character to count: \")\n",
    "    print(f\"The character '{char}' appears {user_input.count(char)} times.\")\n",
    "# Explanation: The count() method counts the occurrences of the specified character in the string.\n",
    "\n",
    "# 6. Write a function that takes two strings and checks if they are anagrams.\n",
    "def are_anagrams(str1, str2):\n",
    "    return sorted(str1) == sorted(str2)\n",
    "# Explanation: Sorting both strings and comparing them determines if they are anagrams because anagrams have identical characters in the same frequency.\n",
    "\n",
    "# 7. Implement a function that removes all vowels from a given string.\n",
    "def remove_vowels(string):\n",
    "    vowels = \"aeiouAEIOU\"\n",
    "    result = ''.join([char for char in string if char not in vowels])\n",
    "    print(f\"String without vowels: {result}\")\n",
    "# Explanation: A list comprehension is used to filter out characters that are vowels, creating a new string without them.\n",
    "\n",
    "# 8. Write a function that checks if a string is a palindrome (case-insensitive).\n",
    "def is_palindrome(string):\n",
    "    string = string.lower()\n",
    "    print(f\"The string is a palindrome: {string == string[::-1]}\")\n",
    "# Explanation: The string is converted to lowercase and compared with its reverse to check for palindrome properties.\n",
    "\n",
    "# 9. Given a string, return the first non-repeating character.\n",
    "def first_non_repeating(string):\n",
    "    from collections import Counter\n",
    "    counts = Counter(string)\n",
    "    for char in string:\n",
    "        if counts[char] == 1:\n",
    "            print(f\"First non-repeating character: {char}\")\n",
    "            return\n",
    "    print(\"No non-repeating character found.\")\n",
    "# Explanation: The Counter class counts the occurrences of each character, and the first character with a count of 1 is returned.\n",
    "\n",
    "# 10. Create a function that capitalizes the first letter of each word in a string.\n",
    "def capitalize_words(string):\n",
    "    print(f\"Capitalized string: {string.title()}\")\n",
    "# Explanation: The title() method capitalizes the first letter of each word in the string.\n",
    "\n",
    "# 11. Write a program to compress a string (e.g., \"aaabb\" -> \"a3b2\").\n",
    "def compress_string(string):\n",
    "    compressed = []\n",
    "    count = 1\n",
    "    for i in range(1, len(string)):\n",
    "        if string[i] == string[i - 1]:\n",
    "            count += 1\n",
    "        else:\n",
    "            compressed.append(string[i - 1] + str(count))\n",
    "            count = 1\n",
    "    compressed.append(string[-1] + str(count))\n",
    "    print(f\"Compressed string: {''.join(compressed)}\")\n",
    "# Explanation: Consecutive characters are counted, and their counts are appended to the compressed result.\n",
    "\n",
    "# 12. Implement a function to find the longest substring without repeating characters.\n",
    "def longest_unique_substring(string):\n",
    "    seen = {}\n",
    "    start = 0\n",
    "    max_length = 0\n",
    "    for end, char in enumerate(string):\n",
    "        if char in seen and seen[char] >= start:\n",
    "            start = seen[char] + 1\n",
    "        seen[char] = end\n",
    "        max_length = max(max_length, end - start + 1)\n",
    "    print(f\"Length of the longest substring without repeating characters: {max_length}\")\n",
    "# Explanation: A sliding window approach with a dictionary tracks the indices of characters to avoid duplicates.\n",
    "\n",
    "# 13. Write a program to check if a string can be rearranged into a palindrome.\n",
    "def can_form_palindrome(string):\n",
    "    from collections import Counter\n",
    "    counts = Counter(string)\n",
    "    odd_count = sum(1 for count in counts.values() if count % 2 != 0)\n",
    "    print(f\"The string can form a palindrome: {odd_count <= 1}\")\n",
    "# Explanation: A string can be rearranged into a palindrome if at most one character has an odd count.\n",
    "\n",
    "# 14. Implement a function that removes all duplicates from a string while preserving the order of characters.\n",
    "def remove_duplicates(string):\n",
    "    seen = set()\n",
    "    result = []\n",
    "    for char in string:\n",
    "        if char not in seen:\n",
    "            seen.add(char)\n",
    "            result.append(char)\n",
    "    print(f\"String without duplicates: {''.join(result)}\")\n",
    "# Explanation: A set keeps track of seen characters, and only unique characters are added to the result.\n",
    "\n",
    "# 15. Write a function to find the longest common prefix among a list of strings.\n",
    "def longest_common_prefix(strings):\n",
    "    if not strings:\n",
    "        print(\"No common prefix.\")\n",
    "        return\n",
    "    prefix = strings[0]\n",
    "    for string in strings[1:]:\n",
    "        while string[:len(prefix)] != prefix and prefix:\n",
    "            prefix = prefix[:-1]\n",
    "    print(f\"Longest common prefix: {prefix}\")\n",
    "# Explanation: The prefix is gradually shortened until it matches the start of all strings in the list.\n",
    "\n",
    "# 16. Implement a custom `split` function without using Python's built-in methods.\n",
    "def custom_split(string, delimiter):\n",
    "    result = []\n",
    "    temp = \"\"\n",
    "    for char in string:\n",
    "        if char == delimiter:\n",
    "            result.append(temp)\n",
    "            temp = \"\"\n",
    "        else:\n",
    "            temp += char\n",
    "    result.append(temp)\n",
    "    print(f\"Split result: {result}\")\n",
    "# Explanation: The string is iterated character by character, splitting it at the delimiter and collecting substrings.\n",
    "\n",
    "# 17. Write a function to decode a given run-length encoded string (e.g., \"a3b2\" -> \"aaabb\").\n",
    "def decode_run_length(string):\n",
    "    result = \"\"\n",
    "    i = 0\n",
    "    while i < len(string):\n",
    "        char = string[i]\n",
    "        i += 1\n",
    "        num = \"\"\n",
    "        while i < len(string) and string[i].isdigit():\n",
    "            num += string[i]\n",
    "            i += 1\n",
    "        result += char * int(num)\n",
    "    print(f\"Decoded string: {result}\")\n",
    "# Explanation: Characters and their counts are extracted, and the character is repeated according to its count.\n",
    "\n",
    "# 18. Implement a function to check if one string is a rotation of another.\n",
    "def is_rotation(str1, str2):\n",
    "    print(f\"The strings are rotations: {len(str1) == len(str2) and str2 in str1 + str1}\")\n",
    "# Explanation: A string and its rotation will always be a substring of the concatenated string.\n",
    "\n",
    "# 19. Create a function to find all permutations of a given string.\n",
    "def string_permutations(string):\n",
    "    from itertools import permutations\n",
    "    result = [''.join(p) for p in permutations(string)]\n",
    "    print(f\"Permutations: {result}\")\n",
    "# Explanation: The permutations function from itertools generates all possible orderings of the string.\n",
    "\n",
    "# 20. Write a function to implement a basic version of the `str.index` method.\n",
    "def custom_index(string, substring):\n",
    "    for i in range(len(string) - len(substring) + 1):\n",
    "        if string[i:i + len(substring)] == substring:\n",
    "            print(f\"Index of substring: {i}\")\n",
    "            return\n",
    "    print(\"Substring not found.\")\n",
    "# Explanation: The string is iterated, comparing substrings of the target length to find the match."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Topic 2: Working with Dictionaries and Other Data Structures\n",
    "# Exercises\n",
    "1. Create a dictionary to store the squares of numbers from 1 to 10.\n",
    "2. Write a program to merge two dictionaries.\n",
    "3. Implement a function to count the occurrences of each word in a given sentence.\n",
    "4. Create a dictionary from two lists: one for keys and one for values.\n",
    "5. Write a program to check if a given key exists in a dictionary.\n",
    "6. Implement a function to invert a dictionary (swap keys and values).\n",
    "7. Write a program to find the key with the highest value in a dictionary.\n",
    "8. Implement a function to sort a dictionary by its values.\n",
    "9. Write a program to remove all duplicate values from a list.\n",
    "10. Create a set containing unique elements from a list.\n",
    "11. Implement a function to find the intersection of two sets.\n",
    "12. Write a program to check if one set is a subset of another.\n",
    "13. Implement a function to find the union of two dictionaries.\n",
    "14. Write a program to flatten a nested list.\n",
    "15. Create a function to find the most frequent element in a list.\n",
    "16. Implement a stack using a list with push and pop operations.\n",
    "17. Write a program to check if a given list is a palindrome.\n",
    "18. Implement a queue using a list with enqueue and dequeue operations.\n",
    "19. Write a program to convert a list of tuples into a dictionary.\n",
    "20. Create a function to find the common elements in two lists.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Solutions\n",
    "# 6. Implement a function to invert a dictionary (swap keys and values).\n",
    "def invert_dict(dictionary):\n",
    "    inverted = {v: k for k, v in dictionary.items()}\n",
    "    print(f\"Inverted dictionary: {inverted}\")\n",
    "# Explanation: A dictionary comprehension is used to swap keys and values.\n",
    "\n",
    "# 7. Write a program to find the key with the highest value in a dictionary.\n",
    "def max_value_key(dictionary):\n",
    "    max_key = max(dictionary, key=dictionary.get)\n",
    "    print(f\"Key with the highest value: {max_key}\")\n",
    "# Explanation: The max() function with the key parameter retrieves the key with the highest value.\n",
    "\n",
    "# 8. Implement a function to sort a dictionary by its values.\n",
    "def sort_dict_by_values(dictionary):\n",
    "    sorted_dict = dict(sorted(dictionary.items(), key=lambda item: item[1]))\n",
    "    print(f\"Dictionary sorted by values: {sorted_dict}\")\n",
    "# Explanation: The sorted() function sorts the dictionary items by value using a lambda function.\n",
    "\n",
    "# 9. Write a program to remove all duplicate values from a list.\n",
    "def remove_duplicates_from_list(lst):\n",
    "    unique_list = list(set(lst))\n",
    "    print(f\"List without duplicates: {unique_list}\")\n",
    "# Explanation: The set() function removes duplicates, and the list() constructor converts it back to a list.\n",
    "\n",
    "# 10. Create a set containing unique elements from a list.\n",
    "def unique_elements(lst):\n",
    "    unique_set = set(lst)\n",
    "    print(f\"Unique elements set: {unique_set}\")\n",
    "# Explanation: The set() constructor creates a set with unique elements from the list.\n",
    "\n",
    "# 11. Implement a function to find the intersection of two sets.\n",
    "def set_intersection(set1, set2):\n",
    "    intersection = set1 & set2\n",
    "    print(f\"Intersection of sets: {intersection}\")\n",
    "# Explanation: The `&` operator finds the common elements between the two sets.\n",
    "\n",
    "# 12. Write a program to check if one set is a subset of another.\n",
    "def is_subset(set1, set2):\n",
    "    print(f\"Set1 is a subset of Set2: {set1.issubset(set2)}\")\n",
    "# Explanation: The issubset() method checks if all elements of set1 are in set2.\n",
    "\n",
    "# 13. Implement a function to find the union of two dictionaries.\n",
    "def union_dicts(dict1, dict2):\n",
    "    union = {**dict1, **dict2}\n",
    "    print(f\"Union of dictionaries: {union}\")\n",
    "# Explanation: The `**` unpacking operator merges the dictionaries, with keys in dict2 overwriting those in dict1.\n",
    "\n",
    "# 14. Write a program to flatten a nested list.\n",
    "def flatten_list(nested_list):\n",
    "    flat_list = [item for sublist in nested_list for item in sublist]\n",
    "    print(f\"Flattened list: {flat_list}\")\n",
    "# Explanation: A list comprehension iterates through each sublist and appends all items to the flat list.\n",
    "\n",
    "# 15. Create a function to find the most frequent element in a list.\n",
    "def most_frequent(lst):\n",
    "    freq = max(set(lst), key=lst.count)\n",
    "    print(f\"Most frequent element: {freq}\")\n",
    "# Explanation: The max() function with key=lst.count finds the element with the highest frequency in the list.\n",
    "\n",
    "# 16. Implement a stack using a list with push and pop operations.\n",
    "class Stack:\n",
    "    def __init__(self):\n",
    "        self.stack = []\n",
    "\n",
    "    def push(self, item):\n",
    "        self.stack.append(item)\n",
    "        print(f\"Pushed {item}: {self.stack}\")\n",
    "\n",
    "    def pop(self):\n",
    "        if self.stack:\n",
    "            item = self.stack.pop()\n",
    "            print(f\"Popped {item}: {self.stack}\")\n",
    "            return item\n",
    "        else:\n",
    "            print(\"Stack is empty.\")\n",
    "# Explanation: A list is used to implement the stack operations of push and pop.\n",
    "\n",
    "# 17. Write a program to check if a given list is a palindrome.\n",
    "def is_list_palindrome(lst):\n",
    "    print(f\"The list is a palindrome: {lst == lst[::-1]}\")\n",
    "# Explanation: The list is compared to its reverse to check for palindrome properties.\n",
    "\n",
    "# 18. Implement a queue using a list with enqueue and dequeue operations.\n",
    "class Queue:\n",
    "    def __init__(self):\n",
    "        self.queue = []\n",
    "\n",
    "    def enqueue(self, item):\n",
    "        self.queue.append(item)\n",
    "        print(f\"Enqueued {item}: {self.queue}\")\n",
    "\n",
    "    def dequeue(self):\n",
    "        if self.queue:\n",
    "            item = self.queue.pop(0)\n",
    "            print(f\"Dequeued {item}: {self.queue}\")\n",
    "            return item\n",
    "        else:\n",
    "            print(\"Queue is empty.\")\n",
    "# Explanation: A list is used to implement the queue operations of enqueue and dequeue.\n",
    "\n",
    "# 19. Write a program to convert a list of tuples into a dictionary.\n",
    "def tuples_to_dict(tuples):\n",
    "    dictionary = dict(tuples)\n",
    "    print(f\"Dictionary: {dictionary}\")\n",
    "# Explanation: The dict() constructor converts the list of tuples into a dictionary.\n",
    "\n",
    "# 20. Create a function to find the common elements in two lists.\n",
    "def common_elements(list1, list2):\n",
    "    common = list(set(list1) & set(list2))\n",
    "    print(f\"Common elements: {common}\")\n",
    "# Explanation: The `&` operator finds the intersection of two sets, and the result is converted back to a list.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Topic 3: Text Processing Including Working with Text Files\n",
    "# Exercises\n",
    "1. Write a program to read a text file and print its contents.\n",
    "2. Write a program to count the number of lines in a text file.\n",
    "3. Write a program to count the number of words in a text file.\n",
    "4. Write a program to count the number of characters in a text file.\n",
    "5. Write a program to find and print the longest word in a text file.\n",
    "6. Write a program to replace a word in a text file with another word.\n",
    "7. Write a program to append a line to a text file.\n",
    "8. Write a program to reverse the contents of a text file and write it to a new file.\n",
    "9. Write a program to find the frequency of each word in a text file.\n",
    "10. Write a program to read a text file and print only the lines that start with a specific letter.\n",
    "11. Write a program to create a new file that contains only unique words from a given text file.\n",
    "12. Write a program to merge the contents of two text files into a third file.\n",
    "13. Write a program to remove all punctuation from a text file and write the result to a new file.\n",
    "14. Write a program to count the occurrences of a specific word in a text file.\n",
    "15. Write a program to check if a specific word exists in a text file.\n",
    "16. Write a program to split a text file into multiple smaller files, each containing a fixed number of lines.\n",
    "17. Write a program to find all palindromic words in a text file.\n",
    "18. Write a program to sort the words in a text file alphabetically and save the result to a new file.\n",
    "19. Write a program to capitalize the first letter of every word in a text file.\n",
    "20. Write a program to remove duplicate lines from a text file and save the result to a new file."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Solutions\n",
    "# 1. Write a program to read a text file and print its contents.\n",
    "def read_file(file_path):\n",
    "    with open(file_path, 'r') as file:\n",
    "        contents = file.read()\n",
    "        print(contents)\n",
    "# Explanation: The file is opened in read mode, and the read() method retrieves the entire content of the file.\n",
    "\n",
    "# 2. Write a program to count the number of lines in a text file.\n",
    "def count_lines(file_path):\n",
    "    with open(file_path, 'r') as file:\n",
    "        lines = file.readlines()\n",
    "        print(f\"Number of lines: {len(lines)}\")\n",
    "# Explanation: The readlines() method reads all lines of the file into a list, and len() calculates the count.\n",
    "\n",
    "# 3. Write a program to count the number of words in a text file.\n",
    "def count_words(file_path):\n",
    "    with open(file_path, 'r') as file:\n",
    "        contents = file.read()\n",
    "        words = contents.split()\n",
    "        print(f\"Number of words: {len(words)}\")\n",
    "# Explanation: The read() method retrieves the content, split() breaks it into words, and len() calculates the count.\n",
    "\n",
    "# 4. Write a program to count the number of characters in a text file.\n",
    "def count_characters(file_path):\n",
    "    with open(file_path, 'r') as file:\n",
    "        contents = file.read()\n",
    "        print(f\"Number of characters: {len(contents)}\")\n",
    "# Explanation: The len() function counts all characters, including spaces and newline characters.\n",
    "\n",
    "# 5. Write a program to find and print the longest word in a text file.\n",
    "def longest_word(file_path):\n",
    "    with open(file_path, 'r') as file:\n",
    "        words = file.read().split()\n",
    "        longest = max(words, key=len)\n",
    "        print(f\"Longest word: {longest}\")\n",
    "# Explanation: The max() function finds the word with the maximum length using key=len.\n",
    "\n",
    "# 6. Write a program to replace a word in a text file with another word.\n",
    "def replace_word(file_path, old_word, new_word):\n",
    "    with open(file_path, 'r') as file:\n",
    "        contents = file.read()\n",
    "    contents = contents.replace(old_word, new_word)\n",
    "    with open(file_path, 'w') as file:\n",
    "        file.write(contents)\n",
    "    print(f\"Replaced '{old_word}' with '{new_word}' in the file.\")\n",
    "# Explanation: The replace() method replaces all occurrences of old_word with new_word.\n",
    "\n",
    "# 7. Write a program to append a line to a text file.\n",
    "def append_line(file_path, line):\n",
    "    with open(file_path, 'a') as file:\n",
    "        file.write(f\"{line}\\n\")\n",
    "    print(f\"Appended line: {line}\")\n",
    "# Explanation: The file is opened in append ('a') mode, and the write() method adds the line.\n",
    "\n",
    "# 8. Write a program to reverse the contents of a text file and write it to a new file.\n",
    "def reverse_file_contents(input_path, output_path):\n",
    "    with open(input_path, 'r') as file:\n",
    "        contents = file.read()\n",
    "    with open(output_path, 'w') as file:\n",
    "        file.write(contents[::-1])\n",
    "    print(f\"Reversed contents written to {output_path}\")\n",
    "# Explanation: The file contents are reversed using slicing ([::-1]) and written to a new file.\n",
    "\n",
    "# 9. Write a program to find the frequency of each word in a text file.\n",
    "def word_frequency(file_path):\n",
    "    with open(file_path, 'r') as file:\n",
    "        words = file.read().split()\n",
    "    frequency = {word: words.count(word) for word in set(words)}\n",
    "    print(f\"Word frequencies: {frequency}\")\n",
    "# Explanation: A dictionary comprehension counts the occurrences of each unique word in the file.\n",
    "\n",
    "# 10. Write a program to read a text file and print only the lines that start with a specific letter.\n",
    "def lines_starting_with(file_path, letter):\n",
    "    with open(file_path, 'r') as file:\n",
    "        lines = file.readlines()\n",
    "    matching_lines = [line.strip() for line in lines if line.startswith(letter)]\n",
    "    print(f\"Lines starting with '{letter}': {matching_lines}\")\n",
    "# Explanation: The startswith() method checks if each line begins with the specified letter.\n",
    "\n",
    "# 11. Write a program to create a new file that contains only unique words from a given text file.\n",
    "def unique_words_file(input_path, output_path):\n",
    "    with open(input_path, 'r') as file:\n",
    "        words = set(file.read().split())\n",
    "    with open(output_path, 'w') as file:\n",
    "        file.write(\" \".join(words))\n",
    "    print(f\"Unique words written to {output_path}\")\n",
    "# Explanation: A set removes duplicate words, and the unique words are written to a new file.\n",
    "\n",
    "# 12. Write a program to merge the contents of two text files into a third file.\n",
    "def merge_files(file1, file2, output_file):\n",
    "    with open(file1, 'r') as f1, open(file2, 'r') as f2, open(output_file, 'w') as out:\n",
    "        out.write(f1.read() + \"\\n\" + f2.read())\n",
    "    print(f\"Merged contents written to {output_file}\")\n",
    "# Explanation: The contents of both files are read and concatenated, then written to a new file.\n",
    "\n",
    "# 13. Write a program to remove all punctuation from a text file and write the result to a new file.\n",
    "def remove_punctuation(input_path, output_path):\n",
    "    import string\n",
    "    with open(input_path, 'r') as file:\n",
    "        contents = file.read()\n",
    "    cleaned_contents = contents.translate(str.maketrans('', '', string.punctuation))\n",
    "    with open(output_path, 'w') as file:\n",
    "        file.write(cleaned_contents)\n",
    "    print(f\"Punctuation removed and written to {output_path}\")\n",
    "# Explanation: The translate() method removes punctuation using a translation table.\n",
    "\n",
    "# 14. Write a program to count the occurrences of a specific word in a text file.\n",
    "def count_word_occurrences(file_path, word):\n",
    "    with open(file_path, 'r') as file:\n",
    "        contents = file.read()\n",
    "    count = contents.split().count(word)\n",
    "    print(f\"The word '{word}' appears {count} times.\")\n",
    "# Explanation: The count() method counts the occurrences of the specified word in the split content.\n",
    "\n",
    "# 15. Write a program to check if a specific word exists in a text file.\n",
    "def word_exists(file_path, word):\n",
    "    with open(file_path, 'r') as file:\n",
    "        contents = file.read()\n",
    "    print(f\"The word '{word}' exists: {word in contents}\")\n",
    "# Explanation: The in operator checks if the word is present in the file content.\n",
    "\n",
    "# 16. Write a program to split a text file into multiple smaller files, each containing a fixed number of lines.\n",
    "def split_file(file_path, lines_per_file):\n",
    "    with open(file_path, 'r') as file:\n",
    "        lines = file.readlines()\n",
    "    for i in range(0, len(lines), lines_per_file):\n",
    "        part_path = f\"{file_path}_part{i//lines_per_file + 1}.txt\"\n",
    "        with open(part_path, 'w') as part_file:\n",
    "            part_file.writelines(lines[i:i + lines_per_file])\n",
    "        print(f\"Created: {part_path}\")\n",
    "# Explanation: The lines are written in chunks to new files using a fixed step size.\n",
    "\n",
    "# 17. Write a program to find all palindromic words in a text file.\n",
    "def find_palindromic_words(file_path):\n",
    "    with open(file_path, 'r') as file:\n",
    "        words = file.read().split()\n",
    "    palindromes = [word for word in words if word == word[::-1]]\n",
    "    print(f\"Palindromic words: {palindromes}\")\n",
    "# Explanation: A list comprehension checks each word to see if it matches its reverse.\n",
    "\n",
    "# 18. Write a program to sort the words in a text file alphabetically and save the result to a new file.\n",
    "def sort_words_in_file(input_path, output_path):\n",
    "    with open(input_path, 'r') as file:\n",
    "        words = file.read().split()\n",
    "    sorted_words = sorted(words)\n",
    "    with open(output_path, 'w') as file:\n",
    "        file.write(\" \".join(sorted_words))\n",
    "    print(f\"Words sorted and written to {output_path}\")\n",
    "# Explanation: The sorted() function arranges words in alphabetical order.\n",
    "\n",
    "# 19. Write a program to capitalize the first letter of every word in a text file.\n",
    "def capitalize_words_in_file(input_path, output_path):\n",
    "    with open(input_path, 'r') as file:\n",
    "        words = file.read().split()\n",
    "    capitalized_words = [word.capitalize() for word in words]\n",
    "    with open(output_path, 'w') as file:\n",
    "        file.write(\" \".join(capitalized_words))\n",
    "    print(f\"Capitalized words written to {output_path}\")\n",
    "# Explanation: A list comprehension applies the capitalize() method to each word.\n",
    "\n",
    "# 20. Write a program to remove duplicate lines from a text file and save the result to a new file.\n",
    "def remove_duplicate_lines(input_path, output_path):\n",
    "    with open(input_path, 'r') as file:\n",
    "        lines = file.readlines()\n",
    "    unique_lines = list(dict.fromkeys(lines))\n",
    "    with open(output_path, 'w') as file:\n",
    "        file.writelines(unique_lines)\n",
    "    print(f\"Duplicate lines removed and written to {output_path}\")\n",
    "# Explanation: A dictionary is used to remove duplicates while preserving the order of lines.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Topic 4: Pandas Usage Oriented Processing\n",
    "# Exercises\n",
    "1. Create a DataFrame from a dictionary of lists and display it.\n",
    "2. Add a new column to an existing DataFrame based on calculations from other columns.\n",
    "3. Filter rows in a DataFrame based on a condition.\n",
    "4. Sort a DataFrame by a specific column in ascending order.\n",
    "5. Write a program to rename the columns of a DataFrame.\n",
    "6. Drop rows with missing values from a DataFrame.\n",
    "7. Write a program to fill missing values in a DataFrame with a default value.\n",
    "8. Group a DataFrame by a specific column and calculate the mean of each group.\n",
    "9. Write a program to merge two DataFrames on a common column.\n",
    "10. Write a program to concatenate two DataFrames vertically.\n",
    "11. Create a new column in a DataFrame that is the result of applying a custom function to an existing column.\n",
    "12. Write a program to count the unique values in a specific column of a DataFrame.\n",
    "13. Write a program to find the maximum value in a specific column of a DataFrame.\n",
    "14. Write a program to filter a DataFrame based on multiple conditions.\n",
    "15. Write a program to calculate the correlation matrix of a DataFrame.\n",
    "16. Write a program to apply a lambda function to every element of a column in a DataFrame.\n",
    "17. Write a program to drop duplicate rows from a DataFrame.\n",
    "18. Write a program to reset the index of a DataFrame.\n",
    "19. Write a program to save a DataFrame to a CSV file.\n",
    "20. Write a program to read a CSV file into a DataFrame and display the first five rows."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Solutions\n",
    "# 1. Create a DataFrame from a dictionary of lists and display it.\n",
    "def create_dataframe():\n",
    "    import pandas as pd\n",
    "    data = {\n",
    "        'Name': ['Alice', 'Bob', 'Charlie'],\n",
    "        'Age': [25, 30, 35],\n",
    "        'City': ['New York', 'Los Angeles', 'Chicago']\n",
    "    }\n",
    "    df = pd.DataFrame(data)\n",
    "    print(df)\n",
    "# Explanation: The pandas DataFrame is created using a dictionary where keys are column names, and values are lists.\n",
    "\n",
    "# 2. Add a new column to an existing DataFrame based on calculations from other columns.\n",
    "def add_new_column():\n",
    "    import pandas as pd\n",
    "    data = {\n",
    "        'Name': ['Alice', 'Bob', 'Charlie'],\n",
    "        'Salary': [50000, 60000, 70000],\n",
    "        'Bonus': [5000, 6000, 7000]\n",
    "    }\n",
    "    df = pd.DataFrame(data)\n",
    "    df['Total Compensation'] = df['Salary'] + df['Bonus']\n",
    "    print(df)\n",
    "# Explanation: A new column is added by performing element-wise operations on existing columns.\n",
    "\n",
    "# 3. Filter rows in a DataFrame based on a condition.\n",
    "def filter_rows():\n",
    "    import pandas as pd\n",
    "    data = {\n",
    "        'Name': ['Alice', 'Bob', 'Charlie'],\n",
    "        'Age': [25, 30, 35]\n",
    "    }\n",
    "    df = pd.DataFrame(data)\n",
    "    filtered_df = df[df['Age'] > 25]\n",
    "    print(filtered_df)\n",
    "# Explanation: The DataFrame is filtered using a condition, and only rows satisfying the condition are displayed.\n",
    "\n",
    "# 4. Sort a DataFrame by a specific column in ascending order.\n",
    "def sort_dataframe():\n",
    "    import pandas as pd\n",
    "    data = {\n",
    "        'Name': ['Alice', 'Bob', 'Charlie'],\n",
    "        'Age': [25, 30, 35]\n",
    "    }\n",
    "    df = pd.DataFrame(data)\n",
    "    sorted_df = df.sort_values(by='Age')\n",
    "    print(sorted_df)\n",
    "# Explanation: The sort_values() method is used to sort the DataFrame by the specified column.\n",
    "\n",
    "# 5. Write a program to rename the columns of a DataFrame.\n",
    "def rename_columns():\n",
    "    import pandas as pd\n",
    "    data = {\n",
    "        'Name': ['Alice', 'Bob', 'Charlie'],\n",
    "        'Age': [25, 30, 35]\n",
    "    }\n",
    "    df = pd.DataFrame(data)\n",
    "    df = df.rename(columns={'Name': 'Full Name', 'Age': 'Years'})\n",
    "    print(df)\n",
    "# Explanation: The rename() method is used to rename the columns of the DataFrame.\n",
    "\n",
    "# 6. Drop rows with missing values from a DataFrame.\n",
    "def drop_missing_values():\n",
    "    import pandas as pd\n",
    "    data = {\n",
    "        'Name': ['Alice', 'Bob', None],\n",
    "        'Age': [25, None, 35]\n",
    "    }\n",
    "    df = pd.DataFrame(data)\n",
    "    df_cleaned = df.dropna()\n",
    "    print(df_cleaned)\n",
    "# Explanation: The dropna() method removes rows with any missing values.\n",
    "\n",
    "# 7. Write a program to fill missing values in a DataFrame with a default value.\n",
    "def fill_missing_values():\n",
    "    import pandas as pd\n",
    "    data = {\n",
    "        'Name': ['Alice', 'Bob', None],\n",
    "        'Age': [25, None, 35]\n",
    "    }\n",
    "    df = pd.DataFrame(data)\n",
    "    df_filled = df.fillna({'Name': 'Unknown', 'Age': 0})\n",
    "    print(df_filled)\n",
    "# Explanation: The fillna() method is used to replace missing values with specified default values.\n",
    "\n",
    "# 8. Group a DataFrame by a specific column and calculate the mean of each group.\n",
    "def group_by_column():\n",
    "    import pandas as pd\n",
    "    data = {\n",
    "        'Department': ['HR', 'HR', 'IT', 'IT'],\n",
    "        'Salary': [50000, 60000, 70000, 80000]\n",
    "    }\n",
    "    df = pd.DataFrame(data)\n",
    "    grouped = df.groupby('Department').mean()\n",
    "    print(grouped)\n",
    "# Explanation: The groupby() method groups the data by the specified column, and mean() calculates the average for each group.\n",
    "\n",
    "# 9. Write a program to merge two DataFrames on a common column.\n",
    "def merge_dataframes():\n",
    "    import pandas as pd\n",
    "    df1 = pd.DataFrame({'ID': [1, 2, 3], 'Name': ['Alice', 'Bob', 'Charlie']})\n",
    "    df2 = pd.DataFrame({'ID': [1, 2, 4], 'Department': ['HR', 'IT', 'Finance']})\n",
    "    merged = pd.merge(df1, df2, on='ID', how='inner')\n",
    "    print(merged)\n",
    "# Explanation: The merge() method combines two DataFrames based on a common column.\n",
    "\n",
    "# 10. Write a program to concatenate two DataFrames vertically.\n",
    "def concatenate_dataframes():\n",
    "    import pandas as pd\n",
    "    df1 = pd.DataFrame({'Name': ['Alice', 'Bob'], 'Age': [25, 30]})\n",
    "    df2 = pd.DataFrame({'Name': ['Charlie', 'David'], 'Age': [35, 40]})\n",
    "    concatenated = pd.concat([df1, df2], ignore_index=True)\n",
    "    print(concatenated)\n",
    "# Explanation: The concat() method combines two DataFrames vertically, and ignore_index=True resets the index.\n",
    "\n",
    "# 11. Create a new column in a DataFrame that is the result of applying a custom function to an existing column.\n",
    "def apply_custom_function():\n",
    "    import pandas as pd\n",
    "    data = {\n",
    "        'Name': ['Alice', 'Bob', 'Charlie'],\n",
    "        'Age': [25, 30, 35]\n",
    "    }\n",
    "    df = pd.DataFrame(data)\n",
    "    df['Age in Months'] = df['Age'].apply(lambda x: x * 12)\n",
    "    print(df)\n",
    "# Explanation: The apply() method applies a custom function to each element in the specified column.\n",
    "\n",
    "# 12. Write a program to count the unique values in a specific column of a DataFrame.\n",
    "def count_unique_values():\n",
    "    import pandas as pd\n",
    "    data = {\n",
    "        'Department': ['HR', 'IT', 'HR', 'Finance', 'IT']\n",
    "    }\n",
    "    df = pd.DataFrame(data)\n",
    "    unique_counts = df['Department'].nunique()\n",
    "    print(f\"Number of unique values: {unique_counts}\")\n",
    "# Explanation: The nunique() method counts the unique values in the specified column.\n",
    "\n",
    "# 13. Write a program to find the maximum value in a specific column of a DataFrame.\n",
    "def find_max_value():\n",
    "    import pandas as pd\n",
    "    data = {\n",
    "        'Name': ['Alice', 'Bob', 'Charlie'],\n",
    "        'Salary': [50000, 60000, 70000]\n",
    "    }\n",
    "    df = pd.DataFrame(data)\n",
    "    max_value = df['Salary'].max()\n",
    "    print(f\"Maximum Salary: {max_value}\")\n",
    "# Explanation: The max() method finds the maximum value in the specified column.\n",
    "\n",
    "# 14. Write a program to filter a DataFrame based on multiple conditions.\n",
    "def filter_multiple_conditions():\n",
    "    import pandas as pd\n",
    "    data = {\n",
    "        'Name': ['Alice', 'Bob', 'Charlie'],\n",
    "        'Age': [25, 30, 35],\n",
    "        'City': ['New York', 'Chicago', 'Los Angeles']\n",
    "    }\n",
    "    df = pd.DataFrame(data)\n",
    "    filtered_df = df[(df['Age'] > 25) & (df['City'] == 'Chicago')]\n",
    "    print(filtered_df)\n",
    "# Explanation: Multiple conditions are combined using & (and) and | (or) operators.\n",
    "\n",
    "# 15. Write a program to calculate the correlation matrix of a DataFrame.\n",
    "def calculate_correlation():\n",
    "    import pandas as pd\n",
    "    data = {\n",
    "        'Math': [90, 85, 80],\n",
    "        'Science': [88, 84, 82],\n",
    "        'English': [78, 76, 74]\n",
    "    }\n",
    "    df = pd.DataFrame(data)\n",
    "    correlation_matrix = df.corr()\n",
    "    print(correlation_matrix)\n",
    "# Explanation: The corr() method calculates the pairwise correlation between numerical columns.\n",
    "\n",
    "# 16. Write a program to apply a lambda function to every element of a column in a DataFrame.\n",
    "def apply_lambda():\n",
    "    import pandas as pd\n",
    "    data = {\n",
    "        'Name': ['Alice', 'Bob', 'Charlie'],\n",
    "        'Salary': [50000, 60000, 70000]\n",
    "    }\n",
    "    df = pd.DataFrame(data)\n",
    "    df['Salary After Tax'] = df['Salary'].apply(lambda x: x * 0.8)\n",
    "    print(df)\n",
    "# Explanation: The apply() method applies a lambda function to each element in the specified column.\n",
    "\n",
    "# 17. Write a program to drop duplicate rows from a DataFrame.\n",
    "def drop_duplicates():\n",
    "    import pandas as pd\n",
    "    data = {\n",
    "        'Name': ['Alice', 'Bob', 'Alice'],\n",
    "        'Age': [25, 30, 25]\n",
    "    }\n",
    "    df = pd.DataFrame(data)\n",
    "    unique_df = df.drop_duplicates()\n",
    "    print(unique_df)\n",
    "# Explanation: The drop_duplicates() method removes duplicate rows from the DataFrame.\n",
    "\n",
    "# 18. Write a program to reset the index of a DataFrame.\n",
    "def reset_index():\n",
    "    import pandas as pd\n",
    "    data = {\n",
    "        'Name': ['Alice', 'Bob', 'Charlie'],\n",
    "        'Age': [25, 30, 35]\n",
    "    }\n",
    "    df = pd.DataFrame(data, index=[101, 102, 103])\n",
    "    reset_df = df.reset_index()\n",
    "    print(reset_df)\n",
    "# Explanation: The reset_index() method resets the index of the DataFrame, adding the old index as a column.\n",
    "\n",
    "# 19. Write a program to save a DataFrame to a CSV file.\n",
    "def save_to_csv():\n",
    "    import pandas as pd\n",
    "    data = {\n",
    "        'Name': ['Alice', 'Bob', 'Charlie'],\n",
    "        'Age': [25, 30, 35]\n",
    "    }\n",
    "    df = pd.DataFrame(data)\n",
    "    df.to_csv('output.csv', index=False)\n",
    "    print(\"DataFrame saved to 'output.csv'\")\n",
    "# Explanation: The to_csv() method saves the DataFrame to a CSV file, with index=False to exclude the index.\n",
    "\n",
    "# 20. Write a program to read a CSV file into a DataFrame and display the first five rows.\n",
    "def read_csv_file():\n",
    "    import pandas as pd\n",
    "    df = pd.read_csv('output.csv')\n",
    "    print(df.head())\n",
    "# Explanation: The read_csv() method reads a CSV file into a DataFrame, and head() displays the first five rows.\n"
   ]
  }
 ],
 "metadata": {
  "language_info": {
   "name": "python"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
